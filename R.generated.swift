//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import RswiftResources
import UIKit

private class BundleFinder {}
let R = _R(bundle: Bundle(for: BundleFinder.self))

struct _R {
  let bundle: Foundation.Bundle

  let reuseIdentifier = reuseIdentifier()

  var string: string { .init(bundle: bundle, preferredLanguages: nil, locale: nil) }
  var color: color { .init(bundle: bundle) }
  var info: info { .init(bundle: bundle) }
  var nib: nib { .init(bundle: bundle) }
  var storyboard: storyboard { .init(bundle: bundle) }

  func string(bundle: Foundation.Bundle) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: nil)
  }
  func string(locale: Foundation.Locale) -> string {
    .init(bundle: bundle, preferredLanguages: nil, locale: locale)
  }
  func string(preferredLanguages: [String], locale: Locale? = nil) -> string {
    .init(bundle: bundle, preferredLanguages: preferredLanguages, locale: locale)
  }
  func color(bundle: Foundation.Bundle) -> color {
    .init(bundle: bundle)
  }
  func info(bundle: Foundation.Bundle) -> info {
    .init(bundle: bundle)
  }
  func nib(bundle: Foundation.Bundle) -> nib {
    .init(bundle: bundle)
  }
  func storyboard(bundle: Foundation.Bundle) -> storyboard {
    .init(bundle: bundle)
  }
  func validate() throws {
    try self.nib.validate()
    try self.storyboard.validate()
  }

  struct project {
    let developmentRegion = "en"
  }

  /// This `_R.string` struct is generated, and contains static references to 4 localization tables.
  struct string {
    let bundle: Foundation.Bundle
    let preferredLanguages: [String]?
    let locale: Locale?
    var infoPlist: infoPlist { .init(source: .init(bundle: bundle, tableName: "InfoPlist", preferredLanguages: preferredLanguages, locale: locale)) }
    var launchScreen: launchScreen { .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale)) }
    var localizable: localizable { .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale)) }
    var main: main { .init(source: .init(bundle: bundle, tableName: "Main", preferredLanguages: preferredLanguages, locale: locale)) }

    func infoPlist(preferredLanguages: [String]) -> infoPlist {
      .init(source: .init(bundle: bundle, tableName: "InfoPlist", preferredLanguages: preferredLanguages, locale: locale))
    }
    func launchScreen(preferredLanguages: [String]) -> launchScreen {
      .init(source: .init(bundle: bundle, tableName: "LaunchScreen", preferredLanguages: preferredLanguages, locale: locale))
    }
    func localizable(preferredLanguages: [String]) -> localizable {
      .init(source: .init(bundle: bundle, tableName: "Localizable", preferredLanguages: preferredLanguages, locale: locale))
    }
    func main(preferredLanguages: [String]) -> main {
      .init(source: .init(bundle: bundle, tableName: "Main", preferredLanguages: preferredLanguages, locale: locale))
    }


    /// This `_R.string.infoPlist` struct is generated, and contains static references to 3 localization keys.
    struct infoPlist {
      let source: RswiftResources.StringResource.Source

      /// en translation: This app wants to use your camera
      ///
      /// Key: NSCameraUsageDescription
      ///
      /// Locales: en, ru
      var nsCameraUsageDescription: RswiftResources.StringResource { .init(key: "NSCameraUsageDescription", tableName: "InfoPlist", source: source, developmentValue: "This app wants to use your camera", comment: nil) }

      /// en translation: This app will use your biometry to auth
      ///
      /// Key: NSFaceIDUsageDescription
      ///
      /// Locales: en, ru
      var nsFaceIDUsageDescription: RswiftResources.StringResource { .init(key: "NSFaceIDUsageDescription", tableName: "InfoPlist", source: source, developmentValue: "This app will use your biometry to auth", comment: nil) }

      /// en translation: This app wants to use your photos
      ///
      /// Key: NSPhotoLibraryUsageDescription
      ///
      /// Locales: en, ru
      var nsPhotoLibraryUsageDescription: RswiftResources.StringResource { .init(key: "NSPhotoLibraryUsageDescription", tableName: "InfoPlist", source: source, developmentValue: "This app wants to use your photos", comment: nil) }
    }

    /// This `_R.string.launchScreen` struct is generated, and contains static references to 1 localization keys.
    struct launchScreen {
      let source: RswiftResources.StringResource.Source

      /// en translation: Launching...
      ///
      /// Key: aMj-Vm-0IZ.text
      ///
      /// Locales: ru, en
      var aMjVm0IZText: RswiftResources.StringResource { .init(key: "aMj-Vm-0IZ.text", tableName: "LaunchScreen", source: source, developmentValue: "Launching...", comment: nil) }
    }

    /// This `_R.string.localizable` struct is generated, and contains static references to 11 localization keys.
    struct localizable {
      let source: RswiftResources.StringResource.Source

      /// en translation: Cancel
      ///
      /// Key: TEXT_CANCEL
      ///
      /// Locales: en, ru
      var text_CANCEL: RswiftResources.StringResource { .init(key: "TEXT_CANCEL", tableName: "Localizable", source: source, developmentValue: "Cancel", comment: nil) }

      /// en translation: Dismiss
      ///
      /// Key: TEXT_DISMISS
      ///
      /// Locales: en, ru
      var text_DISMISS: RswiftResources.StringResource { .init(key: "TEXT_DISMISS", tableName: "Localizable", source: source, developmentValue: "Dismiss", comment: nil) }

      /// en translation: FaceID Auth not available
      ///
      /// Key: TEXT_FACEID_REJECTED
      ///
      /// Locales: en, ru
      var text_FACEID_REJECTED: RswiftResources.StringResource { .init(key: "TEXT_FACEID_REJECTED", tableName: "Localizable", source: source, developmentValue: "FaceID Auth not available", comment: nil) }

      /// en translation: Phone call
      ///
      /// Key: TEXT_PHONE_CALL
      ///
      /// Locales: en, ru
      var text_PHONE_CALL: RswiftResources.StringResource { .init(key: "TEXT_PHONE_CALL", tableName: "Localizable", source: source, developmentValue: "Phone call", comment: nil) }

      /// en translation: Enter PIN
      ///
      /// Key: TEXT_PIN
      ///
      /// Locales: en, ru
      var text_PIN: RswiftResources.StringResource { .init(key: "TEXT_PIN", tableName: "Localizable", source: source, developmentValue: "Enter PIN", comment: nil) }

      /// en translation: Try again
      ///
      /// Key: TEXT_RETRY
      ///
      /// Locales: en, ru
      var text_RETRY: RswiftResources.StringResource { .init(key: "TEXT_RETRY", tableName: "Localizable", source: source, developmentValue: "Try again", comment: nil) }

      /// en translation: Send Email
      ///
      /// Key: TEXT_SEND_EMAIL
      ///
      /// Locales: en, ru
      var text_SEND_EMAIL: RswiftResources.StringResource { .init(key: "TEXT_SEND_EMAIL", tableName: "Localizable", source: source, developmentValue: "Send Email", comment: nil) }

      /// en translation: Send SMS
      ///
      /// Key: TEXT_SEND_SMS
      ///
      /// Locales: en, ru
      var text_SEND_SMS: RswiftResources.StringResource { .init(key: "TEXT_SEND_SMS", tableName: "Localizable", source: source, developmentValue: "Send SMS", comment: nil) }

      /// en translation: Text in telegram
      ///
      /// Key: TEXT_TELEGRAM
      ///
      /// Locales: en, ru
      var text_TELEGRAM: RswiftResources.StringResource { .init(key: "TEXT_TELEGRAM", tableName: "Localizable", source: source, developmentValue: "Text in telegram", comment: nil) }

      /// en translation: Choose the way to contact
      ///
      /// Key: TEXT_TO_CHOOSE
      ///
      /// Locales: en, ru
      var text_TO_CHOOSE: RswiftResources.StringResource { .init(key: "TEXT_TO_CHOOSE", tableName: "Localizable", source: source, developmentValue: "Choose the way to contact", comment: nil) }

      /// en translation: Wrong PIN
      ///
      /// Key: TEXT_WRONGPIN
      ///
      /// Locales: en, ru
      var text_WRONGPIN: RswiftResources.StringResource { .init(key: "TEXT_WRONGPIN", tableName: "Localizable", source: source, developmentValue: "Wrong PIN", comment: nil) }
    }

    /// This `_R.string.main` struct is generated, and contains static references to 7 localization keys.
    struct main {
      let source: RswiftResources.StringResource.Source

      /// en translation: SecureGallery
      ///
      /// Key: 4e0-fJ-vLR.text
      ///
      /// Locales: en, ru
      var e0FJVLRText: RswiftResources.StringResource { .init(key: "4e0-fJ-vLR.text", tableName: "Main", source: source, developmentValue: "SecureGallery", comment: nil) }

      /// en translation:  Identify via FaceID
      ///
      /// Key: S6F-NU-wp4.configuration.title
      ///
      /// Locales: en, ru
      var s6FNUWp4ConfigurationTitle: RswiftResources.StringResource { .init(key: "S6F-NU-wp4.configuration.title", tableName: "Main", source: source, developmentValue: " Identify via FaceID", comment: nil) }

      /// en translation: Button
      ///
      /// Key: S6F-NU-wp4.normalTitle
      ///
      /// Locales: en, ru
      var s6FNUWp4NormalTitle: RswiftResources.StringResource { .init(key: "S6F-NU-wp4.normalTitle", tableName: "Main", source: source, developmentValue: "Button", comment: nil) }

      /// en translation: Button
      ///
      /// Key: YZb-Yf-cYj.normalTitle
      ///
      /// Locales: en, ru
      var yZbYfCYjNormalTitle: RswiftResources.StringResource { .init(key: "YZb-Yf-cYj.normalTitle", tableName: "Main", source: source, developmentValue: "Button", comment: nil) }

      /// en translation:  Contact the developer
      ///
      /// Key: eZf-s1-NzG.configuration.title
      ///
      /// Locales: en, ru
      var eZfS1NzGConfigurationTitle: RswiftResources.StringResource { .init(key: "eZf-s1-NzG.configuration.title", tableName: "Main", source: source, developmentValue: " Contact the developer", comment: nil) }

      /// en translation: Button
      ///
      /// Key: eZf-s1-NzG.normalTitle
      ///
      /// Locales: en, ru
      var eZfS1NzGNormalTitle: RswiftResources.StringResource { .init(key: "eZf-s1-NzG.normalTitle", tableName: "Main", source: source, developmentValue: "Button", comment: nil) }

      /// en translation: Button
      ///
      /// Key: hIT-84-wi0.normalTitle
      ///
      /// Locales: en, ru
      var hIT84Wi0NormalTitle: RswiftResources.StringResource { .init(key: "hIT-84-wi0.normalTitle", tableName: "Main", source: source, developmentValue: "Button", comment: nil) }
    }
  }

  /// This `_R.color` struct is generated, and contains static references to 1 colors.
  struct color {
    let bundle: Foundation.Bundle

    /// Color `AccentColor`.
    var accentColor: RswiftResources.ColorResource { .init(name: "AccentColor", path: [], bundle: bundle) }
  }

  /// This `_R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    let bundle: Foundation.Bundle
    var uiApplicationSceneManifest: uiApplicationSceneManifest { .init(bundle: bundle) }

    func uiApplicationSceneManifest(bundle: Foundation.Bundle) -> uiApplicationSceneManifest {
      .init(bundle: bundle)
    }

    struct uiApplicationSceneManifest {
      let bundle: Foundation.Bundle

      let uiApplicationSupportsMultipleScenes: Bool = false

      var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest"], key: "_key") ?? "UIApplicationSceneManifest" }
      var uiSceneConfigurations: uiSceneConfigurations { .init(bundle: bundle) }

      func uiSceneConfigurations(bundle: Foundation.Bundle) -> uiSceneConfigurations {
        .init(bundle: bundle)
      }

      struct uiSceneConfigurations {
        let bundle: Foundation.Bundle
        var _key: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations"], key: "_key") ?? "UISceneConfigurations" }
        var uiWindowSceneSessionRoleApplication: uiWindowSceneSessionRoleApplication { .init(bundle: bundle) }

        func uiWindowSceneSessionRoleApplication(bundle: Foundation.Bundle) -> uiWindowSceneSessionRoleApplication {
          .init(bundle: bundle)
        }

        struct uiWindowSceneSessionRoleApplication {
          let bundle: Foundation.Bundle
          var defaultConfiguration: defaultConfiguration { .init(bundle: bundle) }

          func defaultConfiguration(bundle: Foundation.Bundle) -> defaultConfiguration {
            .init(bundle: bundle)
          }

          struct defaultConfiguration {
            let bundle: Foundation.Bundle
            var uiSceneConfigurationName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneConfigurationName") ?? "Default Configuration" }
            var uiSceneDelegateClassName: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate" }
            var uiSceneStoryboardFile: String { bundle.infoDictionaryString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication"], key: "UISceneStoryboardFile") ?? "Main" }
          }
        }
      }
    }
  }

  /// This `_R.nib` struct is generated, and contains static references to 2 nibs.
  struct nib {
    let bundle: Foundation.Bundle

    /// Nib `CollectionViewCell`.
    var collectionViewCell: RswiftResources.NibReferenceReuseIdentifier<CollectionViewCell, CollectionViewCell> { .init(name: "CollectionViewCell", bundle: bundle, identifier: "CollectionViewCell") }

    /// Nib `GalleryController`.
    var galleryController: RswiftResources.NibReference<UIKit.UIView> { .init(name: "GalleryController", bundle: bundle) }

    func validate() throws {
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "chevron.backward") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'chevron.backward' is used in nib 'GalleryController', but couldn't be loaded.") } }
      if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "plus") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'plus' is used in nib 'GalleryController', but couldn't be loaded.") } }
      if UIKit.UIColor(named: "AccentColor", in: bundle, compatibleWith: nil) == nil { throw RswiftResources.ValidationError("[R.swift] Color named 'AccentColor' is used in nib 'GalleryController', but couldn't be loaded.") }
    }
  }

  /// This `_R.reuseIdentifier` struct is generated, and contains static references to 1 reuse identifiers.
  struct reuseIdentifier {

    /// Reuse identifier `CollectionViewCell`.
    let collectionViewCell: RswiftResources.ReuseIdentifier<CollectionViewCell> = .init(identifier: "CollectionViewCell")
  }

  /// This `_R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    let bundle: Foundation.Bundle
    var launchScreen: launchScreen { .init(bundle: bundle) }
    var main: main { .init(bundle: bundle) }

    func launchScreen(bundle: Foundation.Bundle) -> launchScreen {
      .init(bundle: bundle)
    }
    func main(bundle: Foundation.Bundle) -> main {
      .init(bundle: bundle)
    }
    func validate() throws {
      try self.launchScreen.validate()
      try self.main.validate()
    }


    /// Storyboard `LaunchScreen`.
    struct launchScreen: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = UIKit.UIViewController

      let bundle: Foundation.Bundle

      let name = "LaunchScreen"
      func validate() throws {

      }
    }

    /// Storyboard `Main`.
    struct main: RswiftResources.StoryboardReference, RswiftResources.InitialControllerContainer {
      typealias InitialController = ViewController

      let bundle: Foundation.Bundle

      let name = "Main"
      func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "eye") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'eye' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "faceid") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'faceid' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "lock.open") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'lock.open' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "phone.connection") == nil { throw RswiftResources.ValidationError("[R.swift] System image named 'phone.connection' is used in storyboard 'Main', but couldn't be loaded.") } }
      }
    }
  }
}